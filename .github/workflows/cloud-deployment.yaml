name: Deploy Ecom Web to Cloud
on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  S3_BUCKET: ${{ secrets.BUCKET }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  EKS_CLUSTER: ${{ vars.EKS_CLUSTER }}

jobs:
  build:
    name: Container Build
    runs-on: ubuntu-latest

    steps:
        - name: Checkout source code
          uses: actions/checkout@v4
  
        - name: login to docker registry
          uses: docker/login-action@v3
          with:
            username: ${{secrets.DOCKERHUB_USERNAME}}
            password: ${{secrets.DOCKERHUB_TOKEN}}
  
        - name: build and push docker image to registry
          uses: docker/build-push-action@v5
          with:
            context: .
            push: true
            tags: warmmike/ecom-web:latest  
    
  deploy:
    needs: [build]
    name: Terraform Cloud Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'push'  

    defaults:
      run:
        shell: bash
        #working-directory: ./terraform
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
    
      - name: Terraform init
        id: init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform validate
        id: validate
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform plan
        id: plan
        working-directory: ./terraform
        run: terraform plan -no-color -input=false -out planfile
        continue-on-error: true

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform apply
        id: apply
        working-directory: ./terraform
        run: terraform apply -auto-approve -input=false -parallelism=1 planfile

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Kubernetes config
        id: getconfig
        if: steps.apply.outcome == 'success'
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }} 

      - name: Install Ingress controller
        if: steps.apply.outcome == 'success' && steps.getconfig.outcome == 'success'
        run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.0-beta.0/deploy/static/provider/aws/deploy.yaml

      - name: Create MariaDB Kubernetes Secret
        run: |
          kubectl create secret generic mariadb \
            --from-literal=host=${{ secrets.DB_HOST }} \
            --from-literal=user=${{ secrets.DB_USER }} \
            --from-literal=password=${{ secrets.DB_PASSWORD }} \
            --from-literal=name=${{ secrets.DB_NAME }} \
            --from-literal=root_password=${{ secrets.DB_ROOT_PASSWORD }} \
            --dry-run=client -o yaml | kubectl apply -f - --insecure-skip-tls-verify --validate=false

      - name: Deploy MariaDB (deployment)
        run: kubectl apply -f k8s/mariadb-deployment.yaml

      - name: Deploy MariaDB (service)
        run: kubectl apply -f k8s/mariadb-service.yaml
                
      - name: Deploy Application (deployment)
        run: kubectl apply -f k8s/app-deployment.yaml

      - name: Deploy Application (service)
        run: kubectl apply -f k8s/app-service.yaml

      - name: Wait For Ingress
        run: kubectl -n ingress-nginx wait --for=jsonpath='{.status.loadBalancer.ingress}' service/ingress-nginx-controller --timeout=60s

      - name: Deploy Application (ingress)
        run: kubectl apply -f k8s/app-ingress.yaml

      - name: Autoscale Application
        run: kubectl autoscale deployment ecom-web --cpu-percent=50 --min=1 --max=6

      - name: Rollout Application (deployment)
        run: kubectl rollout restart deployment/ecom-web

  destroy:
    name: Destroy Cloud Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    defaults:
        run:
          shell: bash
          working-directory: ./terraform

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
    
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
    
      - name: Terraform Init
        id: init
        run: terraform init
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Kubernetes config
        id: getconfig
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }} 

      - name: Delete Ingress controller
        run: kubectl delete -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.0-beta.0/deploy/static/provider/aws/deploy.yaml

      - name: Terraform destroy
        id: destroy
        run: terraform destroy -auto-approve -input=false
